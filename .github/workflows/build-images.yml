name: build images

on:
  workflow_dispatch:
  push:
    branches:
      - v1.2.6.1
    paths:
      - 'springboot-backend/**'
      - 'vite-frontend/**'
      - 'go-gost/**'

jobs:
  build-gost:
    name: Build Gost
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Golang
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Install UPX
        run: |
          sudo apt-get update
          sudo apt-get install -y upx

      - name: Build GOST binary
        working-directory: ./go-gost
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o gost

      - name: Compress with UPX
        working-directory: ./go-gost
        run: |
          upx --best --lzma gost

      - name: Create or Update Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Creating release gost-latest"

          # 创建 Release（如果不存在）
          if ! gh release view gost-latest >/dev/null 2>&1; then
            gh release create gost-latest \
              --title "Release gost-latest" \
              --notes "Auto-generated release"
          fi

          # 上传固定路径文件
          gh release upload gost-latest ./go-gost/gost --clobber

  build-java:
    name: Build & Push Spring Boot Backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK and Maven
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-

      - name: Build Java JAR
        working-directory: ./springboot-backend
        run: mvn clean package -DskipTests

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push images
        uses: docker/build-push-action@v6
        with:
          context: ./springboot-backend/
          file: ./springboot-backend/Dockerfile
          push: true
          tags: ghcr.io/zhoushun98/springboot-backend:v1.2.6.1

  build-vite:
    name: Build & Push Vite Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache Node dependencies
        uses: actions/cache@v4
        with:
          path: ./vite-frontend/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package.json') }}
          restore-keys: ${{ runner.os }}-npm-

      - name: Build Vite
        working-directory: ./vite-frontend
        run: npm install --force && npm run build

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push images
        uses: docker/build-push-action@v6
        with:
          context: ./vite-frontend/
          file: ./vite-frontend/Dockerfile
          push: true
          tags: ghcr.io/zhoushun98/vite-frontend:v1.2.6.1
